{"version":3,"sources":["img sync /^/.//.*/.jpg$","img/1.jpg","img/2.jpg","img/3.jpg","img/background.jpg","serviceWorker.js","Card.js","CardList.js","disneyQuotes.js","SearchBox.js","App.js","index.js"],"names":["map","webpackContext","req","id","webpackContextResolve","__webpack_require__","o","e","Error","code","keys","Object","resolve","module","exports","Boolean","window","location","hostname","match","Card","props","name","quote","className","alt","src","require","width","CardList","disneyQuotes","disneyChar","i","key","category","SearchBox","searchfield","searchChangeProp","type","placeholder","onChange","App","onSearchChange","event","setState","target","value","state","filteredList","this","filter","singleQuote","toLowerCase","includes","Component","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4JAAA,IAAIA,EAAM,CACT,UAAW,GACX,UAAW,GACX,UAAW,GACX,mBAAoB,IAIrB,SAASC,EAAeC,GACvB,IAAIC,EAAKC,EAAsBF,GAC/B,OAAOG,EAAoBF,GAE5B,SAASC,EAAsBF,GAC9B,IAAIG,EAAoBC,EAAEN,EAAKE,GAAM,CACpC,IAAIK,EAAI,IAAIC,MAAM,uBAAyBN,EAAM,KAEjD,MADAK,EAAEE,KAAO,mBACHF,EAEP,OAAOP,EAAIE,GAEZD,EAAeS,KAAO,WACrB,OAAOC,OAAOD,KAAKV,IAEpBC,EAAeW,QAAUR,EACzBS,EAAOC,QAAUb,EACjBA,EAAeE,GAAK,I,gBCzBpBU,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,+B,gBCA3CD,EAAOC,QAAU,IAA0B,wC,8ECYvBC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,qCCFSC,EAbF,SAACC,GAAW,IACfC,EAAmBD,EAAnBC,KAAMnB,EAAakB,EAAblB,GAAIoB,EAASF,EAATE,MAChB,OACI,yBAAKC,UAAU,uDACX,yBAAKC,IAAI,YAAYC,IAAKC,MAAQ,YAAcxB,EAAf,SAA0ByB,MAAM,UACjE,yBAAKJ,UAAU,OACX,4BAAKF,GACL,2BAAIC,MCcLM,EApBE,SAAC,GAAoB,IAAnBC,EAAkB,EAAlBA,aAEf,OACI,6BAEIA,EAAa9B,KAAI,SAAC+B,EAAWC,GACzB,OACI,kBAAC,EAAD,CACIC,IAAKF,EAAW5B,GAChBA,GAAI4B,EAAW5B,GACfmB,KAAMS,EAAWT,KACjBC,MAAOQ,EAAWR,aCf7BO,EAAe,CAE1B,CACE3B,GAAI,EACJmB,KAAM,OACNY,SAAU,YACVX,MAAO,kCAGT,CACEpB,GAAI,EACJmB,KAAM,WACNY,SAAU,SACVX,MAAO,4CAET,CACEpB,GAAI,EACJmB,KAAM,YACNY,SAAU,UACVX,MAAO,8DCAIY,EAhBG,SAAC,GAAmC,EAAlCC,YAAmC,IAAvBC,EAAsB,EAAtBA,iBAC5B,OACI,6BACI,wBAAIb,UAAU,SAAd,2DACA,2BACAA,UAAU,kBACVc,KAAK,SACLC,YAAY,iBACZC,SAAUH,MCuBPI,E,kDA3BX,aAAe,IAAD,8BACV,gBAOJC,eAAiB,SAACC,GACd,EAAKC,SAAS,CAAER,YAAaO,EAAME,OAAOC,SAP1C,EAAKC,MAAQ,CACTjB,aAAcA,EACdM,YAAa,IAJP,E,qDAcJ,IAAD,OACCY,EAAeC,KAAKF,MAAMjB,aAAaoB,QAAQ,SAAAC,GACjD,OAAOA,EAAYjB,SAASkB,cAAcC,SAAS,EAAKN,MAAMX,YAAYgB,kBAE9E,OACI,yBAAM5B,UAAU,MACZ,kBAAC,EAAD,CAAWa,iBAAkBY,KAAKP,iBAClC,kBAAC,EAAD,CAAUZ,aAAckB,S,GAvBtBM,aCElBC,IAASC,OACD,6BACI,kBAAC,EAAD,OAGVC,SAASC,eAAe,SNuHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.b139e8fe.chunk.js","sourcesContent":["var map = {\n\t\"./1.jpg\": 15,\n\t\"./2.jpg\": 16,\n\t\"./3.jpg\": 17,\n\t\"./background.jpg\": 18\n};\n\n\nfunction webpackContext(req) {\n\tvar id = webpackContextResolve(req);\n\treturn __webpack_require__(id);\n}\nfunction webpackContextResolve(req) {\n\tif(!__webpack_require__.o(map, req)) {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t}\n\treturn map[req];\n}\nwebpackContext.keys = function webpackContextKeys() {\n\treturn Object.keys(map);\n};\nwebpackContext.resolve = webpackContextResolve;\nmodule.exports = webpackContext;\nwebpackContext.id = 14;","module.exports = __webpack_public_path__ + \"static/media/1.8bd03498.jpg\";","module.exports = __webpack_public_path__ + \"static/media/2.51e26fb2.jpg\";","module.exports = __webpack_public_path__ + \"static/media/3.ccc0d4aa.jpg\";","module.exports = __webpack_public_path__ + \"static/media/background.5bc4b1ba.jpg\";","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\n\n\nconst Card = (props) => {\n   const {name, id, quote} = props;\n    return (\n        <div className='tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5'>\n            <img alt='loading..' src={require(`../src/img/${id}.jpg`)} width=\"200px\"></img> \n            <div className=\"mw5\">\n                <h2>{name}</h2>    \n                <p>{quote}</p>\n            </div>  \n        </div>\n    );\n};\n\nexport default Card;","import React from 'react';\nimport Card from './Card';\nimport 'tachyons'; \n\nconst CardList = ({disneyQuotes}) => {\n\n    return (\n        <div>\n        {\n            disneyQuotes.map((disneyChar,i) => {\n                return (\n                    <Card \n                        key={disneyChar.id} \n                        id={disneyChar.id} \n                        name={disneyChar.name}\n                        quote={disneyChar.quote}/>\n            )})\n        }\n        \n        </div>\n\n    );\n}\n\nexport default CardList;","export const disneyQuotes = [\n  \n  {\n    id: 1,\n    name: 'Yoda',\n    category: 'Star Wars',\n    quote: 'Che la connessione sia con te!',\n  },\n \n  {\n    id: 2,\n    name: 'Iron Man',\n    category: 'Marvel',\n    quote: 'I limiti sono fatti per essere superati!'\n  },\n  {\n    id: 3,\n    name: 'Peter Pan',\n    category: 'Classic',\n    quote: 'Non smettete mai di sognare, solo chi sogna può volare'\n  },\n//   {\n//     id: 4,\n//     name: 'Patricia Lebsack',\n//     category: 'Karianne',\n//     quote: 'Julianne.OConner@kory.org'\n//   },\n//   {\n//     id: 5,\n//     name: 'Chelsey Dietrich',\n//     category: 'Kamren',\n//     quote: 'Lucio_Hettinger@annie.ca'\n//   },\n//   {\n//     id: 6,\n//     name: 'Mrs. Dennis Schulist',\n//     category: 'Leopoldo_Corkery',\n//     quote: 'Karley_Dach@jasper.info'\n//   },\n//   {\n//     id: 7,\n//     name: 'Kurtis Weissnat',\n//     category: 'Elwyn.Skiles',\n//     quote: 'Telly.Hoeger@billy.biz'\n//   },\n//   {\n//     id: 8,\n//     name: 'Nicholas Runolfsdottir V',\n//     category: 'Maxime_Nienow',\n//     quote: 'Sherwood@rosamond.me'\n//   },\n//   {\n//     id: 9,\n//     name: 'Glenna Reichert',\n//     category: 'Delphine',\n//     quote: 'Chaim_McDermott@dana.io'\n//   },\n//   {\n//     id: 10,\n//     name: 'Clementina DuBuque',\n//     category: 'Moriah.Stanton',\n//     quote: 'Rey.Padberg@karina.biz'\n//   }\n ];\n","import React from 'react';\n\n\nconst SearchBox = ({searchfield,searchChangeProp}) => {\n    return (\n        <div>\n            <h2 className=\"white\">Look for Marvel, Star Wars, Classic Disney, Pixar quote</h2>\n            <input \n            className=\"f2 code pa2 ma3\" \n            type='search' \n            placeholder='e.g.: \"Marvel\"'\n            onChange={searchChangeProp}/>\n            \n        </div>\n    )\n}\n\n\n\nexport default SearchBox;","import React, {Component} from 'react';\nimport CardList from './CardList';\nimport {disneyQuotes} from './disneyQuotes';\nimport SearchBox from './SearchBox';\n\nclass App extends Component {\n\n    constructor (){\n        super();\n        this.state = {\n            disneyQuotes: disneyQuotes,\n            searchfield: ''\n        }\n    }\n\n    onSearchChange = (event) => {\n        this.setState({ searchfield: event.target.value});\n        \n    }\n\n\n    render() {\n        const filteredList = this.state.disneyQuotes.filter( singleQuote => {\n            return singleQuote.category.toLowerCase().includes(this.state.searchfield.toLowerCase())\n            });\n        return (\n            <div  className=\"tc\">\n                <SearchBox searchChangeProp={this.onSearchChange}/>\n                <CardList disneyQuotes={filteredList}/>\n            </div>\n            );\n        }\n    }\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\nimport App from './App';\n\nReactDOM.render(\n        <div>\n            <App />\n\n        </div>\n, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}